@using DocHound.Interfaces

@model DocHound.Models.Docs.TopicViewModel

@{
    if (!Model.RenderTopicOnly)
    {
        Layout = "_Layout.cshtml";
    }
}

@if (Model.GetSetting<bool>(SettingsEnum.UseSyntaxHighlighting))
{
    <link href="~/css/highlightjs/styles/@(Model.SyntaxTheme).css" rel="stylesheet" type="text/css"/>
}
@if (!string.IsNullOrEmpty(Model.CustomCss))
{
    <link href="@Model.CustomCssFullPath" rel="stylesheet" type="text/css" kava-custom="true" />
}

@if (!Model.RenderTopicOnly)
{
    <article class="content-container">
        @Html.Raw(Model.Html)
        @Html.Partial("_PartialDefaultBottomNavigation.cshtml", Model)
    </article>

    <aside class="sidebar">
        @Html.Partial("_PartialDefaultSidebar.cshtml", Model)
    </aside>

    @*Special links we may want to turn on and off based on settings, so we only load what is really needed*@
    if (Model.GetSetting<bool>(SettingsEnum.UseSyntaxHighlighting))
    {
        <script src="~/css/highlightjs/highlight.pack.js"></script>
    }
    if (Model.GetSetting<bool>(SettingsEnum.UseDiagramsMermaid))
    {
        <script src="~/script/mermaid/mermaid.min.js"></script>
    }
    if (Model.GetSetting<bool>(SettingsEnum.UseDiagramsNomnoml))
    {
        <script src="~/script/lodash/lodash.min.js"></script>
        <script src="~/script/dagre/dagre.min.js"></script>
        <script src="~/script/nomnoml/nomnoml.js"></script>
    }

    if (Model.GetSetting<bool>(SettingsEnum.UseSyntaxHighlighting))
    {
        <script src="~/script/Feature-Highlight.js"></script>
    }
    if (Model.GetSetting<bool>(SettingsEnum.UseDiagramsMermaid))
    {
        <script src="~/script/Feature-Mermaid.js"></script>
    }
    if (Model.GetSetting<bool>(SettingsEnum.UseDiagramsNomnoml))
    {
        <script src="~/script/Feature-Nomnoml.js"></script>
    }
    if (Model.GetSetting<bool>("useMathematics"))
    {
        <script type="text/x-mathjax-config">
            // enable inline parsing with single $ instead of /
            MathJax.Hub.Config({
                tex2jax: {
                    @*inlineMath: [['$','$'],['\\(','\\)']],
                    displayMath: [ ['$$','$$'], ['\\[','\\]'] ],*@
                    processEscapes: true
                },
                asciimath2jax: {
                    delimiters: [['`','`']]
                },
                TeX: {
                    extensions: ["autoload-all.js"]
                }
           });
        </script>
        <script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML-full' async></script>
    }
    if (Model.GetSetting<bool>(SettingsEnum.ShowEstimatedReadingTime))
    {
        <script SRC="~/script/Feature-EstimatedReadingTime.js"></script>
    }
}
else
{
    @Html.Raw(Model.Html)
}

